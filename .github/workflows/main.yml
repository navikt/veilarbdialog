name: Test, build, push and deploy
on: [push, workflow_dispatch]
env:
  IMAGE_TAG: ${{ github.sha }}
  IMAGE: docker.pkg.github.com/${{ github.repository }}/veilarbdialog
  PRINT_PAYLOAD: true
jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/dev' && github.ref != 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Set up cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Run maven tests
        run: mvn -B verify
  test-build-and-push:
    name: Test, build and push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Set up cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Build maven artifacts
        run: mvn -B package
      - name: Build and push Docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p ${GITHUB_TOKEN}
          docker build -t ${IMAGE}:${IMAGE_TAG} .
          docker push ${IMAGE}:${IMAGE_TAG}
  deploy-q0:
    name: Deploy application to Q0
    if: github.ref == 'refs/heads/dev'
    needs: test-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Deploy application
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          RESOURCE: nais-dev.yaml
          VAR: version=${{ env.IMAGE_TAG }},namespace=q0
  deploy-q1:
    name: Deploy application to Q1
    if: github.ref == 'refs/heads/dev'
    needs: test-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Deploy application
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          RESOURCE: nais-dev.yaml
          VAR: version=${{ env.IMAGE_TAG }},namespace=q1
  deploy-prod:
    name: Deploy application to prod
    if: github.ref == 'refs/heads/master'
    needs: test-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Deploy application
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-fss
          RESOURCE: nais-prod.yaml
          VAR: version=${{ env.IMAGE_TAG }}
  release-dev:
    name: Create dev release
    needs: [deploy-q0, deploy-q1]
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release/dev@${{ env.IMAGE_TAG }}
          release_name: Release to dev
          prerelease: true
  release-prod:
    name: Create prod release
    needs: deploy-prod
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release/prod@${{ env.IMAGE_TAG }}
          release_name: Release to prod
          prerelease: false